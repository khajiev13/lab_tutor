{"extractions": [{"extraction_class": "TOPIC", "extraction_text": "Core Concepts of NoSQL Databases: The CAP Theorem and BASE Model", "char_interval": {"start_pos": 206, "end_pos": 219}, "alignment_status": "match_lesser", "extraction_index": 1, "group_index": 0, "description": null, "attributes": null}, {"extraction_class": "SUMMARY", "extraction_text": "This session introduces two core concepts of NoSQL databases within the broader context of data storing systems: the CAP theorem and the BASE transaction model. The CAP theorem states that a distributed system cannot simultaneously guarantee Consistency, Availability, and Partition tolerance; it must choose two out of the three. Consistency ensures all nodes have the same data, Availability ensures every request gets a response, and Partition tolerance allows the system to operate despite network failures between nodes. Different databases make different trade-offs: traditional RDBMS prioritize Consistency and Availability (CA), while NoSQL systems like MongoDB and HBase choose Consistency and Partition tolerance (CP), and others like Cassandra and CouchDB opt for Availability and Partition tolerance (AP). The lecture then contrasts the traditional ACID (Atomicity, Consistency, Isolation, Durability) transaction model with the NoSQL-centric BASE (Basically Available, Soft-state, Eventual consistency) model. BASE allows for temporary inconsistencies ('soft-state') and guarantees that data will become consistent over time ('eventual consistency'), prioritizing availability during partitions over the strict guarantees of ACID.", "char_interval": null, "alignment_status": null, "extraction_index": 2, "group_index": 1, "description": null, "attributes": null}, {"extraction_class": "KEYWORDS", "extraction_text": "NoSQL, CAP Theorem, BASE model, Consistency, Availability, Partition Tolerance, Distributed Systems, ACID, Eventual Consistency, Soft-state", "char_interval": {"start_pos": 693, "end_pos": 3250}, "alignment_status": "match_fuzzy", "extraction_index": 3, "group_index": 2, "description": null, "attributes": null}, {"extraction_class": "CONCEPT", "extraction_text": "CAP Theorem", "char_interval": {"start_pos": 220, "end_pos": 231}, "alignment_status": "match_fuzzy", "extraction_index": 4, "group_index": 3, "description": null, "attributes": {"definition": "A principle stating that a distributed system cannot simultaneously meet the three requirements of Consistency, Availability, and Partition tolerance. At most, only two can be satisfied at the same time."}}, {"extraction_class": "CONCEPT", "extraction_text": "Consistency (C in CAP)", "char_interval": {"start_pos": 4017, "end_pos": 4028}, "alignment_status": "match_lesser", "extraction_index": 5, "group_index": 4, "description": null, "attributes": {"definition": "In a distributed environment, the data of multiple storage nodes have the same data value at the same time, and all data backup updates should be synchronized."}}, {"extraction_class": "CONCEPT", "extraction_text": "Availability (A in CAP)", "char_interval": {"start_pos": 1271, "end_pos": 2322}, "alignment_status": "match_fuzzy", "extraction_index": 6, "group_index": 5, "description": null, "attributes": {"definition": "A client can quickly read data and receive an operation result within a reasonable time, ensuring that every request has a response, regardless of success or failure."}}, {"extraction_class": "CONCEPT", "extraction_text": "Partition Tolerance (P in CAP)", "char_interval": {"start_pos": 3058, "end_pos": 5550}, "alignment_status": "match_fuzzy", "extraction_index": 7, "group_index": 6, "description": null, "attributes": {"definition": "The system continues to operate normally even when a partition cannot communicate with other nodes, or when the error or loss of some system data does not affect the overall system operation."}}, {"extraction_class": "CONCEPT", "extraction_text": "ACID", "char_interval": {"start_pos": 3296, "end_pos": 3300}, "alignment_status": "match_fuzzy", "extraction_index": 8, "group_index": 7, "description": null, "attributes": {"definition": "A set of four properties for database transactions: Atomicity (all-or-nothing operations), Consistency (transactions leave data in a valid state), Isolation (concurrent transactions do not interfere with each other), and Durability (committed transactions are permanent)."}}, {"extraction_class": "CONCEPT", "extraction_text": "BASE", "char_interval": {"start_pos": 270, "end_pos": 274}, "alignment_status": "match_fuzzy", "extraction_index": 9, "group_index": 8, "description": null, "attributes": {"definition": "A NoSQL database transaction model with three properties: Basically Available, Soft-state, and Eventual consistency."}}, {"extraction_class": "CONCEPT", "extraction_text": "Basically Available", "char_interval": {"start_pos": 4030, "end_pos": 4039}, "alignment_status": "match_lesser", "extraction_index": 10, "group_index": 9, "description": null, "attributes": {"definition": "When a part of a distributed system becomes unavailable, the other parts can still be used normally."}}, {"extraction_class": "CONCEPT", "extraction_text": "Soft-state", "char_interval": {"start_pos": 4230, "end_pos": 4240}, "alignment_status": "match_exact", "extraction_index": 11, "group_index": 10, "description": null, "attributes": {"definition": "A state where data can be out of sync for a period, with a certain lag, as opposed to a 'hard-state' where data is always correct."}}, {"extraction_class": "CONCEPT", "extraction_text": "Eventual Consistency", "char_interval": {"start_pos": 4496, "end_pos": 4516}, "alignment_status": "match_exact", "extraction_index": 12, "group_index": 11, "description": null, "attributes": {"definition": "A type of weak consistency where subsequent access operations may temporarily fail to read updated data, but after a period, the updated data must eventually be read."}}, {"extraction_class": "CONCEPT", "extraction_text": "Strong Consistency", "char_interval": {"start_pos": 4817, "end_pos": 4835}, "alignment_status": "match_exact", "extraction_index": 13, "group_index": 12, "description": null, "attributes": {"definition": "After an update operation, any subsequent read operation is guaranteed to read the latest updated data."}}, {"extraction_class": "CONCEPT", "extraction_text": "Weak Consistency", "char_interval": {"start_pos": 4840, "end_pos": 4856}, "alignment_status": "match_exact", "extraction_index": 14, "group_index": 13, "description": null, "attributes": {"definition": "It cannot be guaranteed that all subsequent read operations will read the latest updated data."}}], "text": "Hello everyone, I am Haiying Che, from Institute of Data Science and knowledge Engineering\nSchool of Computer Science, in Beijing Institute of Technology, \nin this session, we discuss about NoSQL Database \nCore concepts CAP theorem and No SQL database transaction model BASE\nThe big data computing system can be summarized into three categories: \nData storing system, Data processing system, Data application system\nHere we still in the scope of Data storing system.\nIn data storing system, there are 4 parts to accomplish different tasks, \nwhich is Data collection and modeling, Distributed file system, Distributed database/data warehouse and Unified Data Access Interface.\nHere we still in NoSQL Database.in No SQL database, there are two important concepts, CAP theorem and No SQL database transaction model BASE.\nLet’s look at the CAP theorem first. \nCAP Theorem means A distributed system cannot meet 3 requirements of Consistency, Availability, and Partition tolerance at the same time. \nAt most, only two of them can be satisfied at the same time.\nC stands for Consistency, which means even in a distributed environment, the data of multiple storage nodes have the same data value at the same time, and all data backup updates should be synchronized\nA stands for Availability, which means client can quickly read data, return operation results within a reasonable time, and ensure that every request has a response regardless of success or failure\nP stands for partition tolerance, which means that when a partition in the system cannot communicate with other nodes, it does not affect the normal operation of the rest of the system, or the error or loss of part of the system data does not affect the overall operation of the system. \nAccording to the CAP theorem , a distributed system can only meet two of the CAPs in the mid-run data read and write operations, but not three at the same time. \nThe choice of CAP also leads to the difference between relational databases and NoSQL databases.\nLet’ s watch a video about CAP Theorem .\nFrom the video we understand why the CAP Consistency, Availability, and Partition tolerance cant be satisfied at the same time.\nThe diagram here  shows different product choose different combination of C, A and P.\nRDBMS choose  C and A, \nCA: That is to emphasize consistency (C) and availability (A), give up partition tolerance (P),\nthe simplest way is to put all transaction-related content on the same machine.\nObviously, this approach will seriously affect the scalability of the system. Traditional relational databases (MySQL, SQL Server, and PostgreSQL) all adopt this design principle, so they have poor scalability.\nMongoDB, HBase and Redis choose C and P, \nCP: That is to emphasize consistency (C) and partition tolerance (P), give up availability (A),\nwhen the network partition situation occurs, the affected services need to wait for the data to be consistent, so they cannot provide services to outside parties\nand CouchDB， Cassandra etc. choose A and P\nAP: That is to emphasize availability (A) and partition tolerance (P), give up consistency (C), which allow the system to return inconsistent data\nNow let’s learn the NoSQL characters BASE\nSpeaking of BASE (Basically Available, Soft-state, Eventual consistency), I have to talk about ACID.\nA database transaction has four ACID properties:\nA (Atomicity): Atomicity means that the transaction must be an atomic unit of work. For data modification, either all or none of them are performed.\nC (Consistency): Consistency means that when the transaction is completed, all data must be kept in a consistent state\nI (Isolation): Isolation means that changes made by concurrent firms must be isolated from changes made by any other concurrent firms\nD (Durability): Persistence means that after the transaction is completed, its impact on the system is permanent. This modification will be maintained even if a fatal system failure occurs\nThe basic meaning of BASE is Basically Available, Soft-state, and Eventual consistency:\nBasically, available means that when a part of a distributed system becomes unavailable due to a problem, the other parts can still be used normally, that is, the situation where the partition fails\n\"Soft-state\" is a term corresponding to \"hard-state\". When the data stored in the database is \"hard state\", data consistency can be guaranteed, that is, the data is always correct. \"Soft state\" means that the state can be out of sync for a period, with a certain lag\nEventual consistency means subsequent access operations temporarily can fail to read the updated data, but after a period, the updated data must eventually be read.\nAccording to whether the subsequent operations can obtain the latest data under high-concurrency data access operations.   The types of consistency include strong consistency and weak consistency\nThe main difference between the two is whether the subsequent operations can obtain the latest data under high-concurrency data access operations. \nFor strong consistency, after performing an update operation, other subsequent read operations can ensure that the latest updated data is read; otherwise, if it cannot be guaranteed that all subsequent reads will read the latest updated data, then it is Just weak consistency. \nEventual consistency is just a special case of weak consistency, allowing subsequent access operations to temporarily fail to read the updated data, but after a period, the updated data must eventually be read.\n7\nIn this session we learned two important concepts, CAP theorem and No SQL database transaction model BASE-Basically Available, Soft-state, Eventual consistency.\nthank you for your attention, if you have any question, feel free to contact me.", "document_id": "doc_009b3fa7"}
