{
  "nodes": {
    "TOPIC": [
      {
        "name": "Types of NoSQL Databases"
      },
      {
        "name": "Fundamentals of Big Data Storing Systems and Data Modeling"
      },
      {
        "name": "Introduction to NoSQL Databases for Big Data"
      },
      {
        "name": "Core Concepts of NoSQL Databases: The CAP Theorem and BASE Model"
      },
      {
        "name": "Overview of Popular Data Analysis Algorithms"
      }
    ],
    "THEORY": [
      {
        "id": "theory_4 types of NoSQL",
        "original_text": "4 types of NoSQL\n\nKey Value Pair Based\n\nData is stored in key/value pairs. It is designed in such a way to handle lots of data and heavy load.\n\nKey-value pair storage databases store data as a hash table where each key is unique, and the value can be a JSON, BLOB(Binary Large Objects), string, etc.\n\n\n\nFor example, a key-value pair may contain a key like “Website” associated with a value like “Guru99”.\n\n\n\nIt is one of the most basic NoSQL database example. This kind of NoSQL database is used as a collection, dictionaries, associative arrays, etc. Key value stores help the developer to store schema-less data. They work best for shopping cart contents.\n\n\n\nRedis, Dynamo, Riak are some NoSQL examples of key-value store DataBases. They are all based on Amazon’s Dynamo paper.\n\n\n\nColumn-based\n\nColumn-oriented databases work on columns and are based on BigTable paper by Google. Every column is treated separately. Values of single column databases are stored contiguously.\n\n\n\n\n\nColumn based NoSQL database\n\nThey deliver high performance on aggregation queries like SUM, COUNT, AVG, MIN etc. as the data is readily available in a column.\n\nColumn-based NoSQL databases are widely used to manage data warehouses, business intelligence, CRM, Library card catalogs,\n\nHBase, Cassandra, HBase, Hypertable are NoSQL query examples of column based database.\n\n\n\nDocument-Oriented:\n\nDocument-Oriented NoSQL DB stores and retrieves data as a key value pair but the value part is stored as a document. The document is stored in JSON or XML formats. The value is understood by the DB and can be queried.\n\n\n\nRelational Vs. Document\n\nIn this diagram on your left you can see we have rows and columns, and in the right, we have a document database which has a similar structure to JSON. Now for the relational database, you have to know what columns you have and so on. However, for a document database, you have data store like JSON object. You do not require to define which make it flexible.\n\nThe document type is mostly used for CMS systems, blogging platforms, real-time analytics & e-commerce applications. It should not use for complex transactions which require multiple operations or queries against varying aggregate structures.\n\nAmazon SimpleDB, CouchDB, MongoDB, Riak, Lotus Notes, MongoDB, are popular Document originated DBMS systems.\n\n\n\nGraph-Based\n\nA graph type database stores entities as well the relations amongst those entities. The entity is stored as a node with the relationship as edges. An edge gives a relationship between nodes. Every node and edge has a unique identifier.\n\n\n\nCompared to a relational database where tables are loosely connected, a Graph database is a multi-relational in nature. Traversing relationship is fast as they are already captured into the DB, and there is no need to calculate them.\n\n\n\nGraph base database mostly used for social networks, logistics, spatial data.\n\n\n\nNeo4J, Infinite Graph, OrientDB, FlockDB are some popular graph-based databases.",
        "compressed_text": "The text describes four main types of NoSQL databases. Key-value pair databases store data as a hash table with unique keys and values (like JSON or BLOBs), offering a schema-less structure ideal for applications like shopping carts; examples include Redis and Dynamo. Column-based databases, inspired by Google's BigTable, treat each column separately and store its values contiguously, which excels at aggregation queries (SUM, AVG) and is used in data warehousing; examples are HBase and Cassandra. Document-oriented databases store data in key-value pairs where the value is a document, typically in JSON or XML format, providing flexibility for CMS systems and e-commerce; MongoDB is a popular example. Finally, graph-based databases store entities as nodes and relationships as edges, making them highly efficient for traversing complex, multi-relational data found in social networks and logistics; examples include Neo4J and OrientDB.",
        "source": "4 types of NoSQL.docx",
        "keywords": [
          "NoSQL",
          "Key-Value Pair",
          "Column-based",
          "Document-Oriented",
          "Graph-Based",
          "MongoDB",
          "Cassandra",
          "HBase",
          "Neo4J",
          "schema-less"
        ]
      },
      {
        "id": "theory_BDA 4-1",
        "original_text": "BDA 4-1\n\n1\n\nHello everyone, I am Haiying Che, from Institute of Data Science and knowledge Engineering\n\nSchool of Computer Science, in Beijing Institute of Technology, from this session,\n\n we start to learn Data storing system, and in this session, we discuss about data modeling.\n\n2 \n\nThe big data computing system can be summarized into three categories: from bottom to top, they are\n\nData storing system, Data processing system, Data application system.\n\nIn data storing system we collect the data and store the data, then support upper level data processing,\n\nafter data has been well processed, it can support the big data application. Like data analysis, business intelligent, decision making and so on.\n\nThe data storage architecture is the foundation of big data computing. The upper-level analysis algorithms,\n\n computing models and computing performance all depend on the performance of the data storage system. \n\nTherefore, the data storage system is an important area of big data research. \n\nIn the data storing system, there are 4 parts to accomplish the different tasks, which are data collection and data modeling, File system, database, data warehouse and Unified data access interface.\n\nData collection collect data from multiple data resources, like System logs, Web Crawler, wireless sensor network, internet of things and all kinds of data resources.\n\nAnd after data has been collected, we need clean the data，delete dirty data like repeated data, empty data, wrong data etc. \n\nConvert various types of structured, unstructured, and heterogeneous data into standard storage format data, and define data attributes and value ranges. \n\nAnd We build the data model to organize the data.\n\nAbove the data collection, it is file system, which physically implement the data storing, it could be Centralized or distributed file system, \n\nthen database, which design the logical structure to store the data, include RDBMs and No SQL database.\n\nAll above file system and database is the unified data access interface, which is a data access interface, through which the data processing system can retrieve the data from data storing system.\n\n3 \n\nThe data can be collected from CRM, ERP, financials, social media, exhaust data, logs, files. \n\n(Data exhaust or exhaust data is the trail of data left by the activities of an Internet or other computer system users during their online activity, behavior, and transactions. \n\nDue to the characteristics of multiple data sources, data heterogeneity, unstructured data, distributed computing environment and others, which make the design of big data storage system is more complicated than before.\n\nThe current big data storage architecture is mainly composed of data layer, distributed file system/non-relational database (NoSQL), and unified database reading interface. \n\nSome designs will add a data mining and analysis function on top of NoSQL database. Warehouse layer\n\n4 \n\nThe data layer mainly includes the data acquisition system and provides data extraction, cleaning, and conversion ETL-Extract transform Load, data modeling functions,\n\n1）multiple data sources include enterprise data, business data, personal social data, government statistics, Internet data, Internet of Things data, System log data, Gene sequencing data, atmospheric physics monitoring data, earth satellite observation data, etc.\n\n2） heterogeneous data could be text, pictures, audio and video etc.\n\n3） The unstructured data includes medical imaging data, scans of bank certificates, fragmented communication records, screenshots, etc.\n\nAll these multiple data sources, heterogeneous data, The unstructured data, all these characteristics make it difficult to store raw data directly in the database.\n\n5 \n\nIn big data collecting, there are some Problems：\n\n the original data format cannot be recognized and processed by the data platform.\n\n In many cases, the original data still has problems such as missing records, missing value ranges, and different level data quality problems.\n\nThis requires cleaning the original data before building a database or data warehouse, by merging or removing duplicate data items, eliminating data errors, \n\nData could be Extracted from multiple data sources, extract different value ranges from data items to form the data structure of the target database, \n\nOr data items could be Extracted from one data source and decompose them into multiple structures and load them into the target database,\n\nTransform means Transforming original data items in different formats into a unified standard target database format. \n\nData extraction, cleaning and conversion can be done manually or using software tools.\n\n6\n\nNow let’s look at data modeling, Data modeling is an important part of the data layer work. \n\nData modeling is to establish an abstract model of entity data, including metadata, data structure, attributes, value range, association relationship, and consistency, Timeliness and other elements.\n\nThe data model provides a reference for further data storage structure design, database design and calculation model.\n\n7\n\nBusiness model normally includes process model and data model, process model describes how the business works. \n\nData model describe the data supporting the business process.\n\nThe data model is defined in three levels conceptual model, logic model, and physical model.\n\n8\n\nIn this process diagram. First based on the process models and data requirement we can do the logical modeling, then generate the logical data model as the output.\n\nSynthesize the logical data model, technical requirement and performance requirements, we carry out the physical data modeling and generate the output physical data model. After we have the logical data model and the corresponding physical model, the generated business data can be stored by creating, updating operations in the logical and physical model.\n\n9\n\nData modeling process\n\nLet’s look at the three data model one by one.\n\nBased on the user's data function requirements. functions and association relationships are obtained, \n\nWe can find Entity Class corresponding to the business elements and functions.\n\nConceptual model schema describes the semantics of a domain (the scope of the model). \n\nThis consists of entity classes, representing kinds of things of significance in the domain, and relationships assertions about associations between pairs of entity classes. Simply described, a conceptual schema is the first step in organizing the data requirements.\n\nIn logical model design, more details of data entities, including primary keys, foreign keys, attributes, indexes, relationships, constraints, and even views, with data tables, data columns, value ranges, object-oriented classes, XML tags and other can be describe.\n\nThe physical model  describes the storage implementation of data, including data partition, data table space, and data integration.This is concerned with partitions, CPUs, tablespaces, and the like.\n\n10\n\nAccording to American National Standards Institute, ANSI, the three perspectives should be relatively independent of each other. \n\nStorage technology can change without affecting either the logical or the conceptual schema. \n\nThe table/column structure can change without (necessarily) affecting the conceptual schema. \n\nbut, the structures must remain consistent across all schemas of the same data model, logical or physical.\n\nUML is commonly used Data modeling language, and\n\nCommon data modeling tools includes Power designer, ER/studio.CA Erwin, IBM Infosphere Data Architect, etc.\n\n11\n\nLet’s summarize, in this session, we learned the first layer of data storing system, which includes data acquisition, extraction, transforming and modeling.\n\n12\n\nthank you for your attention, if you have any question, feel free to contact me.",
        "compressed_text": "A big data computing system comprises three layers: data storing, data processing, and data application. The foundational data storing system is crucial for overall performance and consists of four parts: data collection and modeling, file systems, databases, and a unified data access interface. Data collection involves gathering heterogeneous, unstructured data from diverse sources like logs, web crawlers, and IoT devices. This raw data must be cleaned and transformed through an ETL (Extract, Transform, Load) process to handle issues like missing values and inconsistent formats before being stored. A key part of this stage is data modeling, which creates an abstract model of the data's structure, attributes, and relationships. Data modeling is performed at three levels: the conceptual model, which defines high-level business entities and their relationships; the logical model, which details data structures like tables, keys, and constraints; and the physical model, which specifies the actual storage implementation, including partitions and tablespaces. These models provide a blueprint for designing the database and subsequent data processing.",
        "source": "BDA 4-1.docx",
        "keywords": [
          "Data Storing System",
          "Data Modeling",
          "ETL",
          "Conceptual Model",
          "Logical Model",
          "Physical Model",
          "Data Collection",
          "Big Data Architecture",
          "Unstructured Data"
        ]
      },
      {
        "id": "theory_BDA 4-3",
        "original_text": "BDA 4-3\n\n1\n\nHello everyone, I am Haiying Che, from Institute of Data Science and knowledge Engineering\n\nSchool of Computer Science, in Beijing Institute of Technology, \n\nin this session, we discuss about what is NoSQL DB.\n\n2 \n\nThe big data computing system can be summarized into three categories: \n\nData storing system, Data processing system, Data application system\n\nThe data storage architecture is the foundation of big data computing. \n\n In data storing system, there are 4 parts to accomplish different tasks, \n\nwhich is Data collection and modeling, Distributed file system, Distributed database/data warehouse and Unified Data Access Interface.\n\n we learned data collection and modeling, distributed file system, now we look at database.\n\nDatabase normally include relational database like Oracle, SQL server, and NoSQL Database, like MongoDB, Hbase etc.\n\n3\n\nThe distributed database and data warehouse built on the file system not only realize the storage management of data, but more importantly, it supports the fast data query function and data analysis service of the upper computing engine and application software. \n\nCurrently, there are many types of database products that support big data applications, and their storage structures and technologies used are also different. \n\nRelational database RDBMS has always been the mainstream of data storage management system with its good data consistency, complete transaction mechanism, standardized query language, high query efficiency, and mature technology. \n\nIts representative products include Oracle, MS SQL Server and My SQL. When faced with big data computing problems with large amounts of data and large amounts of unstructured or semi-structured data, relational databases face the following challenges:\n\n1） Large-scale (PB-level) storage management of big data requires that the system has good flexibility and can be easily expanded in a distributed environment. \n\nHowever, the traditional relational database emphasizes data consistency and integrity and centralized deployment methods. Its scalability is poor, and it is difficult to adapt to the explosive growth of data\n\n2） RDBMS is suitable for storage management of structured data based on strictly defined key indexes and data table storage modes, and can provide an efficient SQL-based query mechanism. But for unstructured or semi-structured data, RDMS is difficult to process, and query efficiency is greatly reduced\n\n3） Big data calculation processing requires the storage structure to well support the upper-level calculation model.\n\nFor example, the Mapreduce calculation model adopts the Divide-and-Conquer strategy, which first divides a large data set into multiple subsets, and then runs the map program for each subset for processing. After the processing of the subset is completed, the reduce program is run to complete the summary of the calculation results, which requires the underlying data storage structure to support the division and fusion of this data set (or data table structure). \n\nDue to strict data consistency and completeness requirements of relational databases, it is difficult to perform such segmentation processing on data tables. so, it is difficult to support various calculation models for big data calculations\n\nIn recent years, non-relational databases based on distributed file systems that have emerged with big data processing (not only SQL, NoSQL)\n\n4   Now let’s watch a video about “How do NoSQL databases work”.\n\n播放视频的     0:00-6:27！！！\n\n5 from the video we understand How do NoSQL databases work; and advantages, disadvantages relational databases and NoSQL Database.\n\nnon-relational databases based on distributed file systems have good scalability, can effectively process unorganized and semi-structured data, and support high concurrency\n\n The characteristics of the calculation model have been widely used in the Internet, medical and health, e-commerce and other fields. \n\nCompared with traditional relational databases, this type of NoSQL database has the following Common structure characters\n\n1） No pre-defined data format is required\n\nWe don’t need to define a strict data table structure in advance. Each record of data may have different attributes and formats. When inserting data, there is no need to define their format in advance.\n\n2） Shared nothing architecture\n\nNoSQL databases often divide data sets and store them on various local servers. \n\nThe performance of reading data from local disks is often better than that of reading data through network transmission, thereby improving the system's read and write speed.\n\n(A shared-nothing architecture (SN) is a distributed computing architecture in which each update request is satisfied by a single node (processor/memory/storage unit) in a computer cluster. \n\nThe intent is to eliminate resource contention among nodes. \n\n3 ）Flexible and scalable\n\nNodes can be dynamically added or deleted while the system is running without downtime for maintenance, and data can be automatically migrated.\n\n4) Data partition\n\nIn contrast to storing data on the same node, NoSQL databases partition data and distribute records across multiple nodes. \n\nIn addition, replication is usually performed at the same time as the partition, which not only improves parallel performance, but also ensures that there is no single point of failure.\n\n5 ) Asynchronous replication\n\nNoSQL replication is often a log-based Asynchronous replication, so that data can be written to a node as soon as possible, rather than being delayed by network transmission. \n\nThe disadvantage is that consistency is not always guaranteed. NoSQL database provides ultimate consistency.\n\n6\n\nIn this session, we learned what is NoSQL DB.\n\n  thank you for your attention, if you have any question, feel free to contact me.",
        "compressed_text": "The lecture introduces NoSQL databases as a key component of big data storage architecture. It contrasts them with traditional relational databases (RDBMS), which struggle with the scale, unstructured nature, and distributed processing models (like MapReduce) of big data. RDBMS limitations include poor scalability, inefficiency with unstructured data, and rigidity against data segmentation. In contrast, NoSQL databases, built on distributed file systems, offer good scalability, effective processing of unstructured data, and support for high concurrency. The core characteristics of NoSQL databases are explained: no pre-defined data format, a shared-nothing architecture for improved speed, flexible scalability to add or remove nodes dynamically, data partitioning across multiple nodes for parallelism and fault tolerance, and asynchronous replication for fast writes, which leads to eventual consistency rather than the strict consistency found in RDBMS.",
        "source": "BDA 4-3.docx",
        "keywords": [
          "NoSQL",
          "RDBMS",
          "Big Data",
          "Shared-nothing architecture",
          "Data partitioning",
          "Asynchronous replication",
          "Scalability",
          "Unstructured data",
          "Distributed file system",
          "Eventual consistency"
        ]
      },
      {
        "id": "theory_BDA 4-4",
        "original_text": "BDA 4-4\n\n1\n\nHello everyone, I am Haiying Che, from Institute of Data Science and knowledge Engineering\n\nSchool of Computer Science, in Beijing Institute of Technology, \n\nin this session, we discuss about NoSQL Database \n\nCore concepts CAP theorem and No SQL database transaction model BASE\n\n2 \n\nThe big data computing system can be summarized into three categories: \n\nData storing system, Data processing system, Data application system\n\nHere we still in the scope of Data storing system.\n\n In data storing system, there are 4 parts to accomplish different tasks, \n\nwhich is Data collection and modeling, Distributed file system, Distributed database/data warehouse and Unified Data Access Interface.\n\nHere we still in NoSQL Database.in No SQL database, there are two important concepts, CAP theorem and No SQL database transaction model BASE.\n\nLet’s look at the CAP theorem first. \n\n3 \n\nCAP Theorem means A distributed system cannot meet 3 requirements of Consistency, Availability, and Partition tolerance at the same time. \n\nAt most, only two of them can be satisfied at the same time.\n\nC stands for Consistency, which means even in a distributed environment, the data of multiple storage nodes have the same data value at the same time, and all data backup updates should be synchronized\n\nA stands for Availability, which means client can quickly read data, return operation results within a reasonable time, and ensure that every request has a response regardless of success or failure\n\nP stands for partition tolerance, which means that when a partition in the system cannot communicate with other nodes, it does not affect the normal operation of the rest of the system, or the error or loss of part of the system data does not affect the overall operation of the system. \n\nAccording to the CAP theorem , a distributed system can only meet two of the CAPs in the mid-run data read and write operations, but not three at the same time. \n\nThe choice of CAP also leads to the difference between relational databases and NoSQL databases.\n\nLet’ s watch a video about CAP Theorem .\n\n4 \n\nFrom the video we understand why the CAP Consistency, Availability, and Partition tolerance cant be satisfied at the same time.\n\nThe diagram here  shows different product choose different combination of C, A and P.\n\nRDBMS choose  C and A, \n\nCA: That is to emphasize consistency (C) and availability (A), give up partition tolerance (P),\n\n the simplest way is to put all transaction-related content on the same machine.\n\n Obviously, this approach will seriously affect the scalability of the system. Traditional relational databases (MySQL, SQL Server, and PostgreSQL) all adopt this design principle, so they have poor scalability.\n\nMongoDB, HBase and Redis choose C and P, \n\nCP: That is to emphasize consistency (C) and partition tolerance (P), give up availability (A),\n\n when the network partition situation occurs, the affected services need to wait for the data to be consistent, so they cannot provide services to outside parties\n\nand CouchDB， Cassandra etc. choose A and P\n\nAP: That is to emphasize availability (A) and partition tolerance (P), give up consistency (C), which allow the system to return inconsistent data\n\n5\n\nNow let’s learn the NoSQL characters BASE\n\nSpeaking of BASE (Basically Available, Soft-state, Eventual consistency), I have to talk about ACID.\n\nA database transaction has four ACID properties:\n\nA (Atomicity): Atomicity means that the transaction must be an atomic unit of work. For data modification, either all or none of them are performed.\n\nC (Consistency): Consistency means that when the transaction is completed, all data must be kept in a consistent state\n\nI (Isolation): Isolation means that changes made by concurrent firms must be isolated from changes made by any other concurrent firms\n\nD (Durability): Persistence means that after the transaction is completed, its impact on the system is permanent. This modification will be maintained even if a fatal system failure occurs\n\nThe basic meaning of BASE is Basically Available, Soft-state, and Eventual consistency:\n\nBasically, available means that when a part of a distributed system becomes unavailable due to a problem, the other parts can still be used normally, that is, the situation where the partition fails\n\n\"Soft-state\" is a term corresponding to \"hard-state\". When the data stored in the database is \"hard state\", data consistency can be guaranteed, that is, the data is always correct. \"Soft state\" means that the state can be out of sync for a period, with a certain lag\n\nEventual consistency means subsequent access operations temporarily can fail to read the updated data, but after a period, the updated data must eventually be read.\n\n6\n\n According to whether the subsequent operations can obtain the latest data under high-concurrency data access operations.   The types of consistency include strong consistency and weak consistency\n\nThe main difference between the two is whether the subsequent operations can obtain the latest data under high-concurrency data access operations. \n\nFor strong consistency, after performing an update operation, other subsequent read operations can ensure that the latest updated data is read; otherwise, if it cannot be guaranteed that all subsequent reads will read the latest updated data, then it is Just weak consistency. \n\nEventual consistency is just a special case of weak consistency, allowing subsequent access operations to temporarily fail to read the updated data, but after a period, the updated data must eventually be read.\n\n 7\n\nIn this session we learned two important concepts, CAP theorem and No SQL database transaction model BASE-Basically Available, Soft-state, Eventual consistency.\n\nthank you for your attention, if you have any question, feel free to contact me.",
        "compressed_text": "This session introduces two core concepts of NoSQL databases within the broader context of data storing systems: the CAP theorem and the BASE transaction model. The CAP theorem states that a distributed system cannot simultaneously guarantee Consistency, Availability, and Partition tolerance; it must choose two out of the three. Consistency ensures all nodes have the same data, Availability ensures every request gets a response, and Partition tolerance allows the system to operate despite network failures between nodes. Different databases make different trade-offs: traditional RDBMS prioritize Consistency and Availability (CA), while NoSQL systems like MongoDB and HBase choose Consistency and Partition tolerance (CP), and others like Cassandra and CouchDB opt for Availability and Partition tolerance (AP). The lecture then contrasts the traditional ACID (Atomicity, Consistency, Isolation, Durability) transaction model with the NoSQL-centric BASE (Basically Available, Soft-state, Eventual consistency) model. BASE allows for temporary inconsistencies ('soft-state') and guarantees that data will become consistent over time ('eventual consistency'), prioritizing availability during partitions over the strict guarantees of ACID.",
        "source": "BDA 4-4.docx",
        "keywords": [
          "NoSQL",
          "CAP Theorem",
          "BASE model",
          "Consistency",
          "Availability",
          "Partition Tolerance",
          "Distributed Systems",
          "ACID",
          "Eventual Consistency",
          "Soft-state"
        ]
      },
      {
        "id": "theory_BDA 5-22",
        "original_text": "BDA 5-22\n\n1 Hello everyone, I am Haiying Che, from Institute of Data Science and knowledge Engineering\n\nSchool of Computer Science, in Beijing Institute of Technology, In this chapter we will learn some popular algorithms of data analysis\n\n2 Generally Big data processing algorithm basically include data mining algorithms and Machine learning algorithms.\n\nData mining algorithms can be categorized into 4 groups, classification, clustering, correlation Analysis and anomaly detection.\n\nMachine learning algorithms include supervised learning, unsupervised learning, semi-supervised learning and reinforcement learning.\n\nAnd in the scope of supervised learning there are regression, classification, and deep learning.\n\nAnd in the scope of unsupervised learning there are clustering, dimensionality reduction, and anomaly detection.\n\nFor semi-supervised learning, it includes self-training and low-density separation models.\n\nand reinforcement learning include dynamic programming and Monte Carlo methods.\n\n3\n\nIn this chapter we will explain 8 popular algorithms, include Linear Regression, k-means Clustering, k-nearest neighbor, Naive Bayes algorithm, Apriori algorithm, Support Vector Machine, Convolutional Neural Network, Principal Component Analysis. \n\nAnd we will use the Youtube videos to explain the algorithms which is with more animation and easier to understand.\n\n4\n\nIn this session, we will learn Linear Regression algorithm.\n\n5\n\nIn this session, we will learn K-means Clustering algorithm.\n\n6\n\nIn this session, we will learn K-nearest neighbor algorithm.\n\n7\n\nIn this session, we will learn Naive Bayes algorithm.\n\n8\n\nIn this session, we will learn Apriori algorithm.\n\n9\n\nIn this session, we will learn Support Vector Machine.\n\n10\n\nIn this session, we will learn Convolutional Neural Network,CNN.\n\n11\n\nIn this session, we will learn Principal Component Analysis PCA.\n\n12\n\nIn all this chapter we learned the popular algorithms of data analysis\n\nThank you for your attention and if you have any question, feel free to contact me.",
        "compressed_text": "This chapter provides an overview of popular data analysis algorithms, categorizing them into data mining and machine learning. Data mining algorithms are grouped into classification, clustering, correlation analysis, and anomaly detection. Machine learning algorithms are divided into supervised learning (including regression and classification), unsupervised learning (including clustering and dimensionality reduction), semi-supervised learning (including self-training models), and reinforcement learning (including dynamic programming). The chapter will explain eight specific algorithms: Linear Regression, k-means Clustering, k-nearest neighbor, Naive Bayes, Apriori, Support Vector Machine, Convolutional Neural Network (CNN), and Principal Component Analysis (PCA).",
        "source": "BDA 5-22.docx",
        "keywords": [
          "data analysis",
          "data mining",
          "machine learning",
          "supervised learning",
          "unsupervised learning",
          "classification",
          "clustering",
          "Linear Regression",
          "K-means Clustering",
          "Principal Component Analysis"
        ]
      }
    ],
    "CONCEPT": [
      {
        "name": "Key-Value Pair Based Database",
        "definition": "A type of NoSQL database that stores data in key/value pairs, where each key is unique and the value can be a JSON, BLOB, or string. It is designed to handle large amounts of data and is schema-less."
      },
      {
        "name": "Column-based Database",
        "definition": "A NoSQL database type, based on Google's BigTable paper, that works on columns. Values of a single column are stored contiguously, delivering high performance on aggregation queries like SUM, COUNT, and AVG."
      },
      {
        "name": "Document-Oriented Database",
        "definition": "A NoSQL database that stores and retrieves data as a key-value pair, but the value part is stored as a document in formats like JSON or XML. The database can understand and query the contents of the document."
      },
      {
        "name": "Graph-Based Database",
        "definition": "A type of database that stores entities as nodes and the relationships between them as edges. It is multi-relational in nature and allows for fast traversal of relationships, making it suitable for social networks and logistics."
      },
      {
        "name": "Data Storing System",
        "definition": "The foundational layer in a big data computing system that collects and stores data to support upper-level data processing. It includes data collection, data modeling, file systems, databases, and a unified data access interface."
      },
      {
        "name": "Data Collection",
        "definition": "The process of gathering data from multiple sources (e.g., System logs, Web Crawler, wireless sensor network), cleaning it to remove dirty data (repeated, empty, wrong), and converting it into a standard storage format."
      },
      {
        "name": "ETL (Extract, Transform, Load)",
        "definition": "A process for data extraction, cleaning, and conversion. It involves extracting data from various sources, transforming it into a unified standard format for the target database, and loading it."
      },
      {
        "name": "Data Modeling",
        "definition": "The process of establishing an abstract model of entity data, which includes metadata, data structure, attributes, value range, association relationships, consistency, and timeliness. It provides a reference for data storage structure and database design."
      },
      {
        "name": "Conceptual Model",
        "definition": "The first step in organizing data requirements, which describes the semantics of a domain. It consists of entity classes representing significant things in the domain and relationship assertions about associations between them."
      },
      {
        "name": "Logical Model",
        "definition": "A data model that describes details of data entities, including primary keys, foreign keys, attributes, indexes, relationships, and constraints, often using structures like data tables, data columns, and value ranges."
      },
      {
        "name": "Physical Model",
        "definition": "A data model that describes the storage implementation of data, including details such as data partitions, data table spaces, CPUs, and data integration."
      },
      {
        "name": "Data Exhaust",
        "definition": "The trail of data left by the activities of an Internet or other computer system user during their online activity, behavior, and transactions."
      },
      {
        "name": "Relational Database (RDBMS)",
        "definition": "A traditional database system with good data consistency, a complete transaction mechanism, and a standardized query language. It is designed for structured data but faces challenges with big data due to poor scalability, difficulty processing unstructured data, and incompatibility with distributed computing models like MapReduce."
      },
      {
        "name": "NoSQL Database",
        "definition": "A non-relational database based on distributed file systems designed for big data processing. It is characterized by good scalability, the ability to effectively process unorganized and semi-structured data, and support for high concurrency."
      },
      {
        "name": "Shared-nothing architecture",
        "definition": "A distributed computing architecture where each update request is satisfied by a single node in a computer cluster to eliminate resource contention. NoSQL databases use this to divide data sets and store them on local servers, improving system read and write speed."
      },
      {
        "name": "Data partition",
        "definition": "A technique used by NoSQL databases to distribute data records across multiple nodes. This is often done with replication to improve parallel performance and ensure there is no single point of failure."
      },
      {
        "name": "Asynchronous replication",
        "definition": "A log-based replication method where data can be written to a node as soon as possible, rather than being delayed by network transmission. Its disadvantage is that consistency is not always guaranteed, leading to eventual consistency."
      },
      {
        "name": "CAP Theorem",
        "definition": "A principle stating that a distributed system cannot simultaneously meet the three requirements of Consistency, Availability, and Partition tolerance. At most, only two can be satisfied at the same time."
      },
      {
        "name": "Consistency (C in CAP)",
        "definition": "In a distributed environment, the data of multiple storage nodes have the same data value at the same time, and all data backup updates should be synchronized."
      },
      {
        "name": "Availability (A in CAP)",
        "definition": "A client can quickly read data and receive an operation result within a reasonable time, ensuring that every request has a response, regardless of success or failure."
      },
      {
        "name": "Partition Tolerance (P in CAP)",
        "definition": "The system continues to operate normally even when a partition cannot communicate with other nodes, or when the error or loss of some system data does not affect the overall system operation."
      },
      {
        "name": "ACID",
        "definition": "A set of four properties for database transactions: Atomicity (all-or-nothing operations), Consistency (transactions leave data in a valid state), Isolation (concurrent transactions do not interfere with each other), and Durability (committed transactions are permanent)."
      },
      {
        "name": "BASE",
        "definition": "A NoSQL database transaction model with three properties: Basically Available, Soft-state, and Eventual consistency."
      },
      {
        "name": "Basically Available",
        "definition": "When a part of a distributed system becomes unavailable, the other parts can still be used normally."
      },
      {
        "name": "Soft-state",
        "definition": "A state where data can be out of sync for a period, with a certain lag, as opposed to a 'hard-state' where data is always correct."
      },
      {
        "name": "Eventual Consistency",
        "definition": "A type of weak consistency where subsequent access operations may temporarily fail to read updated data, but after a period, the updated data must eventually be read."
      },
      {
        "name": "Strong Consistency",
        "definition": "After an update operation, any subsequent read operation is guaranteed to read the latest updated data."
      },
      {
        "name": "Weak Consistency",
        "definition": "It cannot be guaranteed that all subsequent read operations will read the latest updated data."
      },
      {
        "name": "Data mining algorithms",
        "definition": "A category of big data processing algorithms that can be grouped into classification, clustering, correlation analysis, and anomaly detection."
      },
      {
        "name": "Machine learning algorithms",
        "definition": "A category of big data processing algorithms that include supervised learning, unsupervised learning, semi-supervised learning, and reinforcement learning."
      },
      {
        "name": "Supervised learning",
        "definition": "A type of machine learning that includes regression, classification, and deep learning."
      },
      {
        "name": "Unsupervised learning",
        "definition": "A type of machine learning that includes clustering, dimensionality reduction, and anomaly detection."
      },
      {
        "name": "Semi-supervised learning",
        "definition": "A type of machine learning that includes self-training and low-density separation models."
      },
      {
        "name": "Reinforcement learning",
        "definition": "A type of machine learning that includes dynamic programming and Monte Carlo methods."
      }
    ]
  },
  "relationships": [
    {
      "relationship_type": "HAS",
      "source_type": "TOPIC",
      "target_type": "THEORY",
      "source_identifier": "Types of NoSQL Databases",
      "target_identifier": "theory_4 types of NoSQL",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_4 types of NoSQL",
      "target_identifier": "Key-Value Pair Based Database",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_4 types of NoSQL",
      "target_identifier": "Column-based Database",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_4 types of NoSQL",
      "target_identifier": "Document-Oriented Database",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_4 types of NoSQL",
      "target_identifier": "Graph-Based Database",
      "relationship_properties": {}
    },
    {
      "relationship_type": "HAS",
      "source_type": "TOPIC",
      "target_type": "THEORY",
      "source_identifier": "Fundamentals of Big Data Storing Systems and Data Modeling",
      "target_identifier": "theory_BDA 4-1",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-1",
      "target_identifier": "Data Storing System",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-1",
      "target_identifier": "Data Collection",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-1",
      "target_identifier": "ETL (Extract, Transform, Load)",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-1",
      "target_identifier": "Data Modeling",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-1",
      "target_identifier": "Conceptual Model",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-1",
      "target_identifier": "Logical Model",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-1",
      "target_identifier": "Physical Model",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-1",
      "target_identifier": "Data Exhaust",
      "relationship_properties": {}
    },
    {
      "relationship_type": "HAS",
      "source_type": "TOPIC",
      "target_type": "THEORY",
      "source_identifier": "Introduction to NoSQL Databases for Big Data",
      "target_identifier": "theory_BDA 4-3",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-3",
      "target_identifier": "Relational Database (RDBMS)",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-3",
      "target_identifier": "NoSQL Database",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-3",
      "target_identifier": "Shared-nothing architecture",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-3",
      "target_identifier": "Data partition",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-3",
      "target_identifier": "Asynchronous replication",
      "relationship_properties": {}
    },
    {
      "relationship_type": "HAS",
      "source_type": "TOPIC",
      "target_type": "THEORY",
      "source_identifier": "Core Concepts of NoSQL Databases: The CAP Theorem and BASE Model",
      "target_identifier": "theory_BDA 4-4",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-4",
      "target_identifier": "CAP Theorem",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-4",
      "target_identifier": "Consistency (C in CAP)",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-4",
      "target_identifier": "Availability (A in CAP)",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-4",
      "target_identifier": "Partition Tolerance (P in CAP)",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-4",
      "target_identifier": "ACID",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-4",
      "target_identifier": "BASE",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-4",
      "target_identifier": "Basically Available",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-4",
      "target_identifier": "Soft-state",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-4",
      "target_identifier": "Eventual Consistency",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-4",
      "target_identifier": "Strong Consistency",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 4-4",
      "target_identifier": "Weak Consistency",
      "relationship_properties": {}
    },
    {
      "relationship_type": "HAS",
      "source_type": "TOPIC",
      "target_type": "THEORY",
      "source_identifier": "Overview of Popular Data Analysis Algorithms",
      "target_identifier": "theory_BDA 5-22",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 5-22",
      "target_identifier": "Data mining algorithms",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 5-22",
      "target_identifier": "Machine learning algorithms",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 5-22",
      "target_identifier": "Supervised learning",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 5-22",
      "target_identifier": "Unsupervised learning",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 5-22",
      "target_identifier": "Semi-supervised learning",
      "relationship_properties": {}
    },
    {
      "relationship_type": "MENTIONS",
      "source_type": "THEORY",
      "target_type": "CONCEPT",
      "source_identifier": "theory_BDA 5-22",
      "target_identifier": "Reinforcement learning",
      "relationship_properties": {}
    }
  ],
  "metadata": {
    "total_nodes": 44,
    "total_relationships": 39
  }
}